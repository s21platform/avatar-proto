// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: avatar.proto

package avatar_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AvatarService_SetAvatar_FullMethodName     = "/avatar.AvatarService/SetAvatar"
	AvatarService_GetAllAvatars_FullMethodName = "/avatar.AvatarService/GetAllAvatars"
)

// AvatarServiceClient is the client API for AvatarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AvatarServiceClient interface {
	SetAvatar(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SetAvatarIn, SetAvatarOut], error)
	GetAllAvatars(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetAllAvatarsIn, GetAllAvatarsOut], error)
}

type avatarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAvatarServiceClient(cc grpc.ClientConnInterface) AvatarServiceClient {
	return &avatarServiceClient{cc}
}

func (c *avatarServiceClient) SetAvatar(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SetAvatarIn, SetAvatarOut], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AvatarService_ServiceDesc.Streams[0], AvatarService_SetAvatar_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SetAvatarIn, SetAvatarOut]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AvatarService_SetAvatarClient = grpc.BidiStreamingClient[SetAvatarIn, SetAvatarOut]

func (c *avatarServiceClient) GetAllAvatars(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GetAllAvatarsIn, GetAllAvatarsOut], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AvatarService_ServiceDesc.Streams[1], AvatarService_GetAllAvatars_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetAllAvatarsIn, GetAllAvatarsOut]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AvatarService_GetAllAvatarsClient = grpc.BidiStreamingClient[GetAllAvatarsIn, GetAllAvatarsOut]

// AvatarServiceServer is the server API for AvatarService service.
// All implementations must embed UnimplementedAvatarServiceServer
// for forward compatibility.
type AvatarServiceServer interface {
	SetAvatar(grpc.BidiStreamingServer[SetAvatarIn, SetAvatarOut]) error
	GetAllAvatars(grpc.BidiStreamingServer[GetAllAvatarsIn, GetAllAvatarsOut]) error
	mustEmbedUnimplementedAvatarServiceServer()
}

// UnimplementedAvatarServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAvatarServiceServer struct{}

func (UnimplementedAvatarServiceServer) SetAvatar(grpc.BidiStreamingServer[SetAvatarIn, SetAvatarOut]) error {
	return status.Errorf(codes.Unimplemented, "method SetAvatar not implemented")
}
func (UnimplementedAvatarServiceServer) GetAllAvatars(grpc.BidiStreamingServer[GetAllAvatarsIn, GetAllAvatarsOut]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllAvatars not implemented")
}
func (UnimplementedAvatarServiceServer) mustEmbedUnimplementedAvatarServiceServer() {}
func (UnimplementedAvatarServiceServer) testEmbeddedByValue()                       {}

// UnsafeAvatarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AvatarServiceServer will
// result in compilation errors.
type UnsafeAvatarServiceServer interface {
	mustEmbedUnimplementedAvatarServiceServer()
}

func RegisterAvatarServiceServer(s grpc.ServiceRegistrar, srv AvatarServiceServer) {
	// If the following call pancis, it indicates UnimplementedAvatarServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AvatarService_ServiceDesc, srv)
}

func _AvatarService_SetAvatar_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AvatarServiceServer).SetAvatar(&grpc.GenericServerStream[SetAvatarIn, SetAvatarOut]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AvatarService_SetAvatarServer = grpc.BidiStreamingServer[SetAvatarIn, SetAvatarOut]

func _AvatarService_GetAllAvatars_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AvatarServiceServer).GetAllAvatars(&grpc.GenericServerStream[GetAllAvatarsIn, GetAllAvatarsOut]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AvatarService_GetAllAvatarsServer = grpc.BidiStreamingServer[GetAllAvatarsIn, GetAllAvatarsOut]

// AvatarService_ServiceDesc is the grpc.ServiceDesc for AvatarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AvatarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "avatar.AvatarService",
	HandlerType: (*AvatarServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SetAvatar",
			Handler:       _AvatarService_SetAvatar_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAllAvatars",
			Handler:       _AvatarService_GetAllAvatars_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "avatar.proto",
}
